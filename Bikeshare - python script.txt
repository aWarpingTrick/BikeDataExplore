import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Choose from the following cities (Chicago, New York City, Washington): ')
    city = city.lower()
    while city.strip() != 'chicago' and city.strip() != 'new york city' and city.strip() != 'washington':
        city = input("Oops! It looks like your city selection was not valid. Please enter a city from the listed choices: ")
        city = city.lower()
    # TO DO: get user input for month (all, january, february, ... , june)
    month = input('Enter your month out of the following (January, February, March, April, May, June, July, August, September, October, November, December) to filter by month or enter all so as to not filter by month: ')
    month = month.lower()
    while month.strip() != 'january' and month.strip() != 'february' and month.strip() != 'march' and month.strip() != 'april' and month.strip() != 'may' and month.strip() != 'june' and month.strip() != 'july' and month.strip() != 'august' and month.strip() != 'september' and month.strip() != 'october' and month.strip() != 'november' and month.strip() != 'december' and month.strip() != 'all':
        month = input("Oops! It looks like you didn't enter a valid selection. Please check your spelling and re-enter: ")
        
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('Enter your day of the week out of the following (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday) to filter by weekday or enter all so as to not filter by weekday: ')
    day = day.lower()
    while day != 'monday' and day != 'tuesday' and day != 'wednesday' and day != 'thursday' and day != 'friday' and day != 'saturday' and day != 'sunday' and day != 'all':
        day = input("Oops! It looks like you didn't enter a valid selection. Please check your spelling and re-enter: ")
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month, day of week, and time of day from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['weekday'] = df['Start Time'].dt.weekday
    df['starting_hour'] = df['Start Time'].dt.hour


    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
        month = months.index(month) + 1
        print(month)
        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # use the index of the months list to get the corresponding int
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        day = days.index(day) + 1
    
        # filter by month to create the new dataframe
        df = df[df['weekday'] == day]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    all_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'novemeber', 'december']
    print('The most common month is: ', all_months[int(df.month.mode().values)-1].title())

    # TO DO: display the most common day of week
    all_weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    print('The most common day of the week is: ', all_weekdays[int(df.weekday.mode().values)])
    
    # TO DO: display the most common start hour
    print('The most common starting time on a 24-hour clock is: ', int(df.starting_hour.mode().values), ':00 hours')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    all_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'novemeber', 'december']
    print('From the data the most commonly used start station is: ', str(df['Start Station'].mode().values))

    # TO DO: display most commonly used end station
    print('From the data the most commonly used end station is: ', str(df['End Station'].mode().values))

    df['combo'] = df['Start Station'] + str(' -to- ') + df['End Station']
    # TO DO: display most frequent combination of start station and end station trip
    print('From the data the most frequent combination of start and end station is: ', df['combo'].mode().values)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('The total travel time is: ', df['Trip Duration'].sum(), 'seconds or', df['Trip Duration'].sum()/60, 'minutes or', df['Trip Duration'].sum()/3600, 'hours')

    # TO DO: display mean travel time
    print('The mean travel time is: ', (df['Trip Duration'].sum()/len(df.index)), 'seconds or', (df['Trip Duration'].sum()/len(df.index))/60, 'minutes or', (df['Trip Duration'].sum()/len(df.index))/3600, 'hours')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('Display counts user types:\n',df['User Type'].value_counts(), '\n')

    # TO DO: Display counts of gender
    if city == 'chicago' or city == 'new york city':
        print('Gender count:\n', df['Gender'].value_counts(), '\n')

    # TO DO: Display earliest, most recent, and most common year of birth
    if city == 'chicago' or city == 'new york city':
        print('The earliest birth year is: ', int(df['Birth Year'].min()), '\n')
        print('The most recent birth year is: ', int(df['Birth Year'].max()), '\n')
        df = df.dropna(subset=['Birth Year'])
        print('The most common year of birth is: ', int(df['Birth Year'].mode().values), '\n')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()